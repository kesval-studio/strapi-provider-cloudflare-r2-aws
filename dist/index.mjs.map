{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import {\n\tS3Client,\n\tDeleteObjectCommand,\n\ttype DeleteObjectCommandOutput,\n\ttype PutObjectCommandInput,\n\ttype DeleteBucketCommandInput,\n} from \"@aws-sdk/client-s3\";\nimport type { ReadStream } from \"node:fs\";\nimport { Upload } from \"@aws-sdk/lib-storage\";\nimport type { AwsCredentialIdentity } from \"@aws-sdk/types\";\n\nexport interface File {\n\tname: string;\n\talternativeText?: string;\n\tcaption?: string;\n\twidth?: number;\n\theight?: number;\n\tformats?: Record<string, unknown>;\n\thash: string;\n\text?: string;\n\tmime: string;\n\tsize: number;\n\tsizeInBytes: number;\n\turl: string;\n\tpreviewUrl?: string;\n\tpath?: string;\n\tprovider?: string;\n\tprovider_metadata?: Record<string, unknown>;\n\tstream?: ReadStream;\n\tbuffer?: Buffer;\n}\n\nexport type InitOptions = {\n\tcredentials?: AwsCredentialIdentity;\n\n\tendpoint?: string;\n\tparams?: {\n\t\tBucket?: string;\n\t};\n\n\tregion?: string;\n\n\tcloudflarePublicAccessUrl?: string;\n\tpool?: boolean;\n};\n\ntype InitResult = {\n\tuploadStream(\n\t\tfile: File,\n\t\tcustomParams?: Partial<PutObjectCommandInput>,\n\t): Promise<undefined>;\n\tupload(\n\t\tfile: File,\n\t\tcustomParams?: Partial<PutObjectCommandInput>,\n\t): Promise<undefined>;\n\tdelete(\n\t\tfile: File,\n\t\tcustomParams?: Partial<DeleteBucketCommandInput>,\n\t): Promise<DeleteObjectCommandOutput>;\n};\n\nconst removeLeadingSlash = (path: string) => {\n\treturn path.replace(/^\\//, \"\");\n};\n\nconst getPathKey = (file: File, pool = false) => {\n\tconst filePath = file.path ? `${file.path}/` : \"\";\n\tlet path = filePath;\n\tif (!pool) {\n\t\tpath =\n\t\t\tfile.path && file.path !== \"/\"\n\t\t\t\t? `${removeLeadingSlash(file.path)}/${filePath}`\n\t\t\t\t: filePath;\n\t}\n\n\tconst Key = `${path}${file.hash}${file.ext}`;\n\treturn { path, Key };\n};\n\nexport default {\n\tinit({\n\t\tparams,\n\t\tcredentials,\n\t\tendpoint,\n\t\tcloudflarePublicAccessUrl,\n\t\tpool,\n\t\tregion,\n\t}: InitOptions): InitResult {\n\t\tconst S3 = new S3Client({\n\t\t\tregion: region || \"auto\",\n\t\t\tendpoint: endpoint,\n\t\t\tcredentials: credentials,\n\t\t});\n\n\t\tif (!cloudflarePublicAccessUrl) {\n\t\t\tprocess.emitWarning(\n\t\t\t\t\"\\x1b[43mWARNING (strapi-provider-cloudflare-r2):\\x1b[0m the provider config requires cloudflarePublicAccessUrl to upload files larger than 5MB. See more: https://github.com/trieb-work/strapi-provider-cloudflare-r2#provider-configuration\",\n\t\t\t);\n\t\t}\n\n\t\tconst upload: InitResult[\"upload\"] = async (file, customParams) => {\n\t\t\tconst { Key } = getPathKey(file, pool);\n\n\t\t\tconst command = new Upload({\n\t\t\t\tclient: S3,\n\t\t\t\tparams: {\n\t\t\t\t\tBucket: params?.Bucket,\n\t\t\t\t\tKey: Key,\n\t\t\t\t\t// biome-ignore lint/suspicious/noExplicitAny: comes from official strapi s3 provider\n\t\t\t\t\tBody: file.stream || Buffer.from(file.buffer as any, \"binary\"),\n\t\t\t\t\tContentType: file.mime,\n\t\t\t\t\t...customParams,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst uploaded = await command.done();\n\n\t\t\tconst key =\n\t\t\t\tuploaded.Location === \"auto\" &&\n\t\t\t\tuploaded.Key?.startsWith(`${params?.Bucket}/`)\n\t\t\t\t\t? uploaded.Key.replace(`${params?.Bucket}/`, \"\")\n\t\t\t\t\t: uploaded.Key;\n\n\t\t\t// Set the bucket file URL.\n\t\t\t// If there is a custom endpoint for data access set, replace the upload endpoint with the read enpoint URL.\n\t\t\t// Otherwise, use location returned from S3 API if it's not \"auto\"\n\t\t\tif (cloudflarePublicAccessUrl) {\n\t\t\t\tfile.url = `${cloudflarePublicAccessUrl.replace(/\\/$/g, \"\")}/${key}`;\n\t\t\t} else if (uploaded.Location !== \"auto\") {\n\t\t\t\tfile.url = uploaded.Location as string;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Cloudflare S3 API returned no file location and cloudflarePublicAccessUrl is not set. strapi-provider-cloudflare-r2-aws requires cloudflarePublicAccessUrl to upload files larger than 5MB. https://github.com/trieb-work/strapi-provider-cloudflare-r2#provider-configuration\",\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tuploadStream(file, customParams) {\n\t\t\t\treturn upload(file, customParams);\n\t\t\t},\n\t\t\tupload(file, customParams) {\n\t\t\t\treturn upload(file, customParams);\n\t\t\t},\n\t\t\tasync delete(file, customParams = {}) {\n\t\t\t\tconst { Key } = getPathKey(file, pool);\n\n\t\t\t\tconst command = new DeleteObjectCommand({\n\t\t\t\t\tBucket: params?.Bucket,\n\t\t\t\t\tKey: Key,\n\t\t\t\t\t...customParams,\n\t\t\t\t});\n\n\t\t\t\treturn await S3.send(command);\n\t\t\t},\n\t\t};\n\t},\n};\n"],"names":["removeLeadingSlash","path","replace","getPathKey","file","pool","filePath","Key","hash","ext","init","params","credentials","endpoint","cloudflarePublicAccessUrl","region","S3","S3Client","process","emitWarning","upload","customParams","command","Upload","client","Bucket","Body","stream","Buffer","from","buffer","ContentType","mime","uploaded","done","key","Location","startsWith","url","Error","uploadStream","delete","DeleteObjectCommand","send"],"mappings":"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"}